//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/VirtualButtonsForUnity/VirtualButtonsForUnity/Examples/Scripts/PlayerActionsExample.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActionsExample : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActionsExample()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActionsExample"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""273f247e-7ede-4607-9179-565ba36b2eeb"",
            ""actions"": [
                {
                    ""name"": ""Move_P01"",
                    ""type"": ""Value"",
                    ""id"": ""a6d9108d-0c4f-4263-b8fd-0b1d0a1e7e36"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move_P02"",
                    ""type"": ""Value"",
                    ""id"": ""4faf37d4-2a71-418f-9d9b-df010632af33"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""87e02e82-8896-4260-9c55-1ac134235353"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move_P01"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd185d40-f4f8-46df-ba8f-d9ebf0d25854"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move_P02"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move_P01 = m_Player.FindAction("Move_P01", throwIfNotFound: true);
        m_Player_Move_P02 = m_Player.FindAction("Move_P02", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move_P01;
    private readonly InputAction m_Player_Move_P02;
    public struct PlayerActions
    {
        private @PlayerActionsExample m_Wrapper;
        public PlayerActions(@PlayerActionsExample wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move_P01 => m_Wrapper.m_Player_Move_P01;
        public InputAction @Move_P02 => m_Wrapper.m_Player_Move_P02;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move_P01.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove_P01;
                @Move_P01.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove_P01;
                @Move_P01.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove_P01;
                @Move_P02.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove_P02;
                @Move_P02.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove_P02;
                @Move_P02.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove_P02;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move_P01.started += instance.OnMove_P01;
                @Move_P01.performed += instance.OnMove_P01;
                @Move_P01.canceled += instance.OnMove_P01;
                @Move_P02.started += instance.OnMove_P02;
                @Move_P02.performed += instance.OnMove_P02;
                @Move_P02.canceled += instance.OnMove_P02;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove_P01(InputAction.CallbackContext context);
        void OnMove_P02(InputAction.CallbackContext context);
    }
}
